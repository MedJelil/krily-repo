// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Admin {
  id          Int    @id @default(autoincrement())
  name        String
  phoneNumber String @unique
  password    String
}

model User {
  id           Int           @id @default(autoincrement())
  name         String
  phoneNumber  String        @unique
  password     String
  status       Status        @default(NOT_VERIFIED)
  image_url    String
  permis       String
  identity     String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  rentedCars   RentedCar[] // One-to-many relationship
  reservedCars ReservedCar[] // One-to-many relationship
}

model Rental {
  id          Int      @id @default(autoincrement())
  name        String
  phoneNumber String   @unique
  password    String
  status      Status   @default(NOT_VERIFIED)
  location    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  cars        Car[] // One-to-many relationship
}

model Car {
  id             Int      @id @default(autoincrement())
  model          String
  brand          String
  gearBox        String
  fuel           String
  status         Status   @default(NOT_VERIFIED)
  main_image_url String
  image1_url     String
  image2_url     String
  silenders      Int
  color          String
  year           Int
  daily_price    Float
  rentalId       Int
  rental         Rental   @relation(fields: [rentalId], references: [id])
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model RentedCar {
  id        Int      @id @default(autoincrement())
  days      Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ReservedCar {
  id          Int      @id @default(autoincrement())
  rental_date DateTime
  days        Int
  userId      Int
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

enum Status {
  VERIFIED
  IN_PROGRESS
  NOT_VERIFIED
  BLOCKED
}
